Outline of project
Title:  Development of a tool to facilitate the production of animated interactive learning materials, games and simulations – a software engineering approach.

Introduction
The use of animation, simulation, and games in education has attracted a lot of research attention; some along the lines of ‘is it good, or is it not good?’ but more nuanced research has developed theories and principles of when it is good to use animated content and when it is not, and also principles in designing good animated educational content [1], accepting that any form of media can be used for teaching and learning, if it is used correctly.

The Wikipedia page on ‘Educational Animation’ [2] summarises the advantages:
“In contrast with static pictures, animations can show temporal change directly (rather than having to indicate it indirectly using auxiliary markings such as arrows and motion lines). Using animations instead of static graphics removes the need for these added markings so that displays can be not only simpler and less cluttered, but also more vivid, engaging, and more intuitively comprehended. In addition, the learner does not have to interpret the auxiliary markings and try to infer the changes that they summarise. Such interpretation and inference may demand a level of graphicacy skills that the learner does not possess. With animated depictions, information about the changes involved is available to be read straight from the display without the learner needing to perform mental animation.”

However, it is the use of games in learning that raised the debate on what the alliance of technology, 
education and media means:

“Because television, the internet, computer games and so on have become so accessible, entertaining and persuasive, it is claimed that schools increasingly struggle to meet the high production-value expectations of children. This is expressed in the demand for teachers and schools to embrace new technologies, to make lessons more fun and to improve the ‘slickness’ of their presentations.” [3]

This project is aiming to facilitate teachers, developers, educators, learning technologists in the production of animation/simulation/games as learning material. The intention is to ultimately situate a game engine and authoring tools within a online virtual learning environment (VLE)providing not just tools for creating and displaying this content but also assisting with feedback to the VLE to monitor students progress using the material, even potentially setting learners the task of authoring their own content – and getting feedback from this.
This stage of the project is primarily focused on creating a reusable framework which is extendible, flexible and with good enough performance to support the construction of learning materials by a web developer or learning technologist with some development experience; ultimately this will form the foundation of a much more accomplished tool, which will contain an intuitive useable GUI, resource management and functions that allow content to be shared between authors.

From the start it is important that the system supports distributed learning, i.e. it can be embedded into the web page in an online learning system, also in order to facilitate ‘micro-learning’ [4] it should be possible to use the material the system produces on a mobile phone or tablet device. In short, it should be available on as many platforms as possible. 

In order to deliver richly interactive content to a web client you need to deliver some kind of executable instructions, ideally the same instructions can be sent to any platform and it will execute in roughly the same manner. There are 2 main strategies for achieving this:

1) Ahead of time (AOT) compilation to bytecode which runs on a virtual machine installed on the client (e.g. Java, Adobe Flash Player) 
2) Just in time (JIT) compilation by a compiler installed on the client machine (e.g. ECMAScript/JavaScript)

I will briefly consider these here, for more information on the background of this section please see appendix A: ‘How to hit a moving target platform’ 

Firstly it’s important to say that all each of these three technologies have both stratagies available, Hotspot the Java Virtual Machine uses JIT technology as does Adobe’s AVM2 embedded in Flash Player version 9 and upwards. Google have created Closure a Javascript to Javascript compiler that performs static analysis based on code/type hints that the programmer leaves in the source code at authoring time, so there is usually a blended approach to the strategies.
The benefit of AOT compilation is that the compiler has enough time to perform static analysis on the source code which enables it to make optimisations, this is a time luxury that the JIT compiler does not have. The vitual machine can also be optimised, such as 



The technical challenge -> the browser as embedded environment 

Use interface

Appropriate interface and notification tools

Challanges -> understanding intuitinve mechanisms -> USE OF A DOMAIN SPECIFIC LANGUAGE?
Designing 
Feedback

Designed to support applications to produce 
Distributed learning
Mobile learning
Micro learning
2 – Overview
Sets the scene by giving an overview of an envisaged use context
3- Conceptual Model
+ methodology to develop it
4 – Overalll system architecture
Meets the requirement of extensibility, flexibiligy, performance
5 – Technical Details

 Footnotes:

[1] Mayer, R.E., & Moreno, R. (2002). Animation as an aid to multimedia learning. Educational Psychology Review, 14, 87-99
[2] http://en.wikipedia.org/wiki/Educational_animation
[3] Kenway, J and Bullen, E (2001) Consuming Children: Education-entertainmentadvertising (Maidenhead: Open University Press).
[4] http://en.wikipedia.org/wiki/Micro_learning
[5] http://krebsonsecurity.com/2010/10/java-a-gift-to-exploit-pack-makers/
